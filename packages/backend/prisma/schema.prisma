// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== CORE MODELS =====

model Project {
  id        String   @id @default(cuid())
  name      String
  domain    String   @unique
  description String?
  status    String   @default("active") // active, inactive, archived
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String

  // Relations
  keywords      Keyword[]
  linkPositions LinkPosition[]
  tags          Tag[]
  schemas       Schema[]
  xmlImports    XmlImport[]
  keywordAnalysis KeywordAnalysis[]

  @@map("projects")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  roleId    String
  status    String   @default("active") // active, inactive, suspended
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  role       Role     @relation(fields: [roleId], references: [id])
  projects   Project[]
  xmlImports XmlImport[]
  schemas    Schema[]
  tags       Tag[]

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions Json     // Array of permission strings
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users User[]

  @@map("roles")
}

// ===== TOOL 1: XML IMPORT =====

model XmlImport {
  id          String   @id @default(cuid())
  url         String
  xpath       String
  result      String?
  status      String   @default("pending") // pending, processing, success, failed
  errorMessage String?
  metadata    Json?    // Additional import metadata
  createdBy   String
  projectId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project? @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [createdBy], references: [id])

  @@map("xml_imports")
}

// ===== TOOL 2 & 3: LINK POSITION CHECKING =====

model LinkPosition {
  id          String   @id @default(cuid())
  projectId   String
  keyword     String
  domain      String
  position    Int?
  resultLink  String?
  contentArea String?  // XPath content area
  isHidden    Boolean  @default(false)
  hiddenMethod String? // How the link is hidden
  status      String   @default("pending") // pending, checked, failed
  checkedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id])

  @@map("link_positions")
}

// ===== TOOL 4: KEYWORD ANALYSIS =====

model KeywordAnalysis {
  id             String   @id @default(cuid())
  projectId      String
  keyword1       String
  keyword2       String
  similarityScore Float   // 0.0 to 1.0
  commonResults  Json?    // Array of common search results
  isDuplicate    Boolean  @default(false)
  analyzedAt     DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id])

  @@map("keyword_analysis")
}

// ===== TOOL 5: KEYWORD RANKING =====

model Keyword {
  id        String   @id @default(cuid())
  text      String
  projectId String
  status    String   @default("pending") // pending, checked, failed
  position  Int?     // Thứ hạng trên Google
  resultLink String? // Link kết quả tìm kiếm
  lastChecked DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project     Project       @relation(fields: [projectId], references: [id])
  keywordRanks KeywordRank[]

  @@unique([text, projectId])
  @@map("keywords")
}

model KeywordRank {
  id        String   @id @default(cuid())
  position  Int
  url       String
  title     String?
  snippet   String?
  checkedAt DateTime @default(now())
  keywordId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  keyword Keyword @relation(fields: [keywordId], references: [id])

  @@map("keyword_ranks")
}

// ===== TOOL 6 & 8: SCHEMA MANAGEMENT =====

model Schema {
  id          String   @id @default(cuid())
  name        String
  description String?
  formFields  Json     // Array of form field definitions
  isPublic    Boolean  @default(false)
  isTemplate  Boolean  @default(false)
  version     String   @default("1.0.0")
  createdBy   String
  projectId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project? @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [createdBy], references: [id])
  accessControls SchemaAccessControl[]

  @@map("schemas")
}

// ===== TOOL 9: SCHEMA ACCESS CONTROL =====

model SchemaAccessControl {
  id        String   @id @default(cuid())
  schemaId  String
  roleId    String
  canRead   Boolean  @default(false)
  canWrite  Boolean  @default(false)
  canDelete Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  schema Schema @relation(fields: [schemaId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@unique([schemaId, roleId])
  @@map("schema_access_controls")
}

// ===== TOOL 7: TAG MANAGEMENT =====

model Tag {
  id          String   @id @default(cuid())
  name        String
  domain      String
  description String?
  code        String   // HTML/JavaScript code to inject
  placement   String   @default("head") // head, body, footer
  status      String   @default("active") // active, inactive
  createdBy   String
  projectId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project? @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [createdBy], references: [id])

  @@map("tags")
}

// ===== SYSTEM TABLES =====

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string") // string, number, boolean, json
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_configs")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String   // create, update, delete, login, etc.
  resource  String   // table name or resource type
  resourceId String? // ID of the affected resource
  details   Json?    // Additional details about the action
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}
